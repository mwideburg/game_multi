[{"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/index.js":"1","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Chat/Chat.js":"2","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/mainContext.js":"3","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Game/scene.js":"4","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Login/Login.js":"5","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/DefaultPage.js":"6","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/socketContext.js":"7","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/usersContext.js":"8","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Game/game.js":"9","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/App.js":"10"},{"size":410,"mtime":1611485668000,"results":"11","hashOfConfig":"12"},{"size":4833,"mtime":1622653210589,"results":"13","hashOfConfig":"12"},{"size":449,"mtime":1622138499913,"results":"14","hashOfConfig":"12"},{"size":18858,"mtime":1622667733127,"results":"15","hashOfConfig":"12"},{"size":2657,"mtime":1622034216535,"results":"16","hashOfConfig":"12"},{"size":483,"mtime":1621529260351,"results":"17","hashOfConfig":"12"},{"size":436,"mtime":1621529308544,"results":"18","hashOfConfig":"12"},{"size":407,"mtime":1622034216535,"results":"19","hashOfConfig":"12"},{"size":1746,"mtime":1622665428425,"results":"20","hashOfConfig":"12"},{"size":1117,"mtime":1621531417098,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"smhams",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/index.js",[],"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Chat/Chat.js",[],"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/mainContext.js",[],["49","50"],"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Game/scene.js",["51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78"],"import ReactDOM from \"react-dom\";\nimport React, { useContext, useEffect, useState, useRef } from 'react'\nimport { \n    Flex, \n    Heading, \n    Text,  \n    Button,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton, \n    useDisclosure\n} from \"@chakra-ui/react\"\n\nimport { useHistory } from 'react-router-dom'\nimport { MainContext } from '../../mainContext'\nimport { SocketContext } from '../../socketContext'\nimport { UsersContext } from '../../usersContext'\nimport * as THREE from \"three\";\nimport { PointerLockControls } from 'three/examples/jsm/controls/PointerLockControls.js';\nimport { Socket } from \"socket.io-client\";\n\nimport './scene.scss'\n\n\nconst Scene = () => {\n    const ref = useRef();\n    const { users, games, setUsers, setGames } = useContext(UsersContext)\n    const { name, room, game, setName, setRoom, setGame } = useContext(MainContext)\n    const [scene, setScene] = useState(new THREE.Scene())\n    const [players, setPlayers] = useState({});\n    const socket = useContext(SocketContext)\n    const[player1Name, setName1] = useState(game.player1)\n    const[player2Name, setName2] = useState(game.player2)\n    const { isOpen, onOpen, onClose } = useDisclosure();\n    const history = useHistory()\n    \n    window.onpopstate = e => logout()\n    useEffect(() => { if (!name) return history.push('/') }, [history, name])\n    const [pressedKeys, setPressedKeys] = useState([]);\n\n    const ALLOWED_KEYS = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight']\n        \n    useEffect(() => {\n        \n        const startButt = games.find(game => game.room === room)\n        \n        if (startButt && !startButt.status) {\n            document.getElementById(\"start-game\").style.display = \"block\"\n        }\n   \n        let moveForward = false;\n        let moveBackward = false;\n        let moveLeft = false;\n        let moveRight = false;\n        let canJump = false;\n        let prevTime = performance.now();\n        let start;\n        const velocity = new THREE.Vector3();\n        const randomDir = [-1, -.2, -1.5, -2, 1, 2, 1.5, .5, .7, 1.8]\n        var ballDirX = 1, ballDirY = -1, ballSpeed = .1;\n\n        const camera = new THREE.PerspectiveCamera(\n            75,\n            1.46,\n            0.1,\n            1000\n        );\n        let score1 = 0\n        let score2 = 0\n        let computerSpeed = 7.7\n        let dir = 0\n\n\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(850, 500);\n\n        ref.current.appendChild(renderer.domElement);\n        camera.position.z = 5;\n\n        makeLine(\"green\", [-5.6, 0, 0], [.1, 7.7, 0])\n        makeLine(\"green\", [5.6, 0, 0], [.1, 7.7, 0])\n\n        const leftWall = -5.2\n        const rightWall = 5.4\n        const topWall = 3.7\n        const bottomWall = -3.68\n        let objects = createPong();\n\n        socket.on('movePlayers', (positions) => {\n            \n            \n           if(selected != \"player2\"){\n               objects[\"player2\"].position.set(5, positions.player2[1], 0)\n           }\n           if(selected != \"player1\"){\n               objects[\"player1\"].position.set(...positions.player1)\n           }\n            \n            if(positions.ball === undefined ){\n                return\n            }\n            // if(selected != \"player1\" ){\n                \n                let newBall = makeBall(...positions.ball)\n                scene.remove(objects[\"ball\"])\n                objects[\"ball\"] = newBall\n\n                scene.add(newBall)\n\n                // ballDirY = positions.ballDirY\n                // ballDirX = positions.ballDirX\n                // ballSpeed = positions.ballSpeed\n            // }\n            \n\n        })\n        let controls = null;\n        let selected = null;\n        let computer = false;\n        socket.on('games', () => {\n            if(game.player2Name === \"Player 2\"){\n                computer = true\n            }else if (game.player1Name === \"Player 1\") {\n                computer = true\n            }\n        })\n  \n        socket.on(\"playerAdded\", user => {\n           \n            if (game.status || user.selected === \"none\" ){\n                return;\n            } \n            if (user.selected === \"player1\"){\n                computer = true\n               \n            } \n            if (user.selected === \"player2\") {\n                console.log(\"player 2 computer false\")\n                computer = false\n            }\n\n            if(user.name != name) return;\n\n            selected = user.selected\n            controls = new PointerLockControls(objects[user.selected], renderer.domElement);\n            scene.add(controls.getObject());\n            window.addEventListener('keydown', onKeyDown);\n            window.addEventListener('keyup', onKeyUp);\n        })\n\n        addObjects(objects)\n        \n        socket.on(\"startGame\", (game) => {\n            \n            document.getElementById(\"start-game\").style.display = \"none\"\n            \n            start = true;\n            \n            \n            \n        })\n\n        socket.on(\"playerLeft\", (user) => {\n            if(user.selected === \"player2\" || user.selected === \"player1\"){\n                computer = true\n            }\n           \n            \n        })\n        \n        socket.on(\"newScores\", game => {\n            score1 = game.score[0]\n            score2 = game.score[1]\n            \n            if (score1 === 10 || score2 === 10) {\n                \n                document.getElementById(\"start-game\").style.display = \"block\"\n                onOpen() \n            }\n            \n        })\n        const onKeyDown = function (event) {\n            switch (event.code) {\n                case 'ArrowUp':\n                case 'KeyW':\n                    moveForward = true;\n                    break;\n\n                case 'ArrowDown':\n                case 'KeyS':\n                    moveBackward = true;\n                    break;\n                default:\n                    break;\n            }\n        };\n        socket.on('playAgain', () => {\n           \n            if(selected === \"none\"){\n               \n                return;\n            }\n            score1 = 0\n            score2 = 0\n            onClose()\n            \n            objects[\"player1\"].position.set(-5, 0, 0)\n            objects[\"player2\"].position.set(5, 0, 0)\n            ballSpeed = .1\n            ballDirY = randomDir[Math.floor(Math.random() * randomDir.length)]\n           \n        })\n\n        const onKeyUp = function (event) {\n\n            switch (event.code) {\n\n                case 'ArrowUp':\n                case 'KeyW':\n                    moveForward = false;\n                    break;\n\n                case 'ArrowDown':\n                case 'KeyS':\n                    moveBackward = false;\n                default:\n                    break;\n\n            }\n\n        };\n        \n        const moveComputer = (player2, ball, delta) => {\n            \n           \n            if(dir > computerSpeed * 2){\n                dir = 0\n            }\n            if (dir < computerSpeed * 2) {\n                dir = 0\n            }\n            if (player2.position.y > ball.position.y){\n                \n                dir -= .4\n            }\n            if (player2.position.y < ball.position.y) {\n                \n                dir += .4\n            }\n\n            player2.position.lerp(new THREE.Vector3(player2.position.x, ball.position.y, 0), (computerSpeed * delta))\n\n            const comp = (selected === \"player1\") ? \"player2\" : \"player1\"\n            socket.emit(\"move\", { id: socket.id, room: room, computer: true, selected: comp, position: [player2.position.x, player2.position.y, 0], ball: \"computer\"})\n        }\n\n        const collisionCheck = (ball) => {\n            const playArr = [objects[\"player1\"], objects[\"player2\"]]\n            playArr.forEach(player => {\n                // const top = ball.position.distanceTo(player.position)\n                const tr = [player.position.x + .05, player.position.y + .55]\n                const bl = [player.position.x - .05, player.position.y - .55]\n                const distance = ball.position.distanceTo(player.position)\n                const ballPos = ball.position\n                const number1 = (tr[0] > 0) ? .1 : .3\n                const number2 = (tr[0] > 0) ? -.3 : .1\n                if (ballPos.x <= tr[0] + number1 && ballPos.x >= tr[0] + number2 && ballPos.y <= tr[1] && ballPos.y >= bl[1]) {\n\n                    ballDirX = -ballDirX;\n\n                    if (ballPos.y > player.position.y && ballPos.y - player.position.y > .2) {\n                        if (ballDirY < 0) {\n                            ballDirY -= .3;\n                        } else {\n                            ballDirY += .3;\n                        }\n\n                    }\n                    if (ballPos.y < player.position.y && player.position.y - ballPos.y > .2) {\n                        if (ballDirY < 0) {\n                            ballDirY = -.3;\n                        } else {\n                            ballDirY += .3;\n                        }\n                        // ballDirY = -ballDirY;\n\n                    }\n                    ballSpeed += .149\n                }\n            })\n            if (ballDirY > ballSpeed * 2) {\n                ballDirY = ballSpeed * 2;\n            }\n            else if (ballDirY < -ballSpeed * 2) {\n                ballDirY = -ballSpeed * 2;\n            }\n            // if ball goes off the top side (side of table)\n            if (ball.position.y >= topWall) {\n                ballDirY = -ballDirY;\n            }\n\n            // if ball goes off the bottom side (side of table)\n            if (ball.position.y <= bottomWall) {\n                ballDirY = -ballDirY;\n            }\n            if (ball.position.x >= rightWall + .5) {\n                \n                score1 += 1\n                ball.position.set(0, 0, 0)\n                ballSpeed = 0\n\n                socket.emit(\"playerScored\", {room: room, player: \"player1\"})\n                if (score1 === 10) {\n                    socket.emit(\"playerWon\", { room: room, player: \"player2\" })\n                    start = false\n                    onOpen();\n                    return;\n                }\n                \n                setTimeout(() => {\n                    ballSpeed = .1\n                    \n                    ballDirY = randomDir[Math.floor(Math.random() * randomDir.length)]\n                }, 300)\n            }\n            \n            // if ball goes off the bottom side (side of table)\n            if (ball.position.x <= leftWall - .5) {\n                ball.position.set(0, 0, 0)\n                ballSpeed = 0\n                score2 += 1\n                socket.emit(\"playerScored\", { room: room, player: \"player2\" })\n                if (score2 === 10) {\n                    socket.emit(\"playerWon\", { room: room, player: \"player2\" })\n                    start = false\n                    onOpen();\n                    return;\n                }\n                setTimeout(() => {\n                    ballSpeed = .1\n                    \n                    ballDirY = randomDir[Math.floor(Math.random() * randomDir.length)]\n                }, 300)\n            }\n\n            \n\n            if (ballSpeed > .1) {\n                ballSpeed -= .0006\n            }\n            if (ballSpeed > .2) {\n                ballSpeed -= .004\n            }\n            ball.translateX( ballDirX * ballSpeed)\n            ball.translateY( ballDirY * ballSpeed)\n            \n        }\n    \n        const animate = function () {\n            requestAnimationFrame(animate);\n            \n            if(controls != null && selected != null && start){\n                const time = performance.now();\n                const delta = (time - prevTime) / 1000;\n                let dir = 0\n                if (moveForward) {\n                    if (controls.getObject().position.y < topWall - .48) {\n                        dir = .12\n                    }\n                }\n                if (moveBackward) {\n                    if (controls.getObject().position.y > bottomWall + .475) {\n                        dir = -.12\n                    }\n                }\n                \n                controls.getObject().position.y += (dir); // new behavior\n                \n                const play = objects[selected]\n                const ball = objects[\"ball\"]\n                if (computer === true) {\n                    const comp = (selected === \"player1\") ? \"player2\" : \"player1\"\n                    moveComputer(objects[comp], ball, delta);\n                }\n                if (selected === \"player1\" || computer === true) {\n                    \n                    collisionCheck(objects[\"ball\"])\n                }\n                \n                if(selected === \"player1\" || computer === true){\n                    socket.emit('move', { position: [play.position.x, play.position.y, play.position.z], selected: selected, id: socket.id, name: name, ballSpeed: ballSpeed, ballDirX: ballDirX, ballDirY: ballDirY, ball: [ball.position.x, ball.position.y, ball.position.z] });\n                }else{\n\n                    socket.emit('move', { position: [play.position.x, play.position.y, play.position.z], selected: selected, id: socket.id, name: name});\n                }\n\n                prevTime = time;\n\n            }\n            \n            \n            renderer.render(scene, camera);\n        };\n        \n        animate();\n\n        return () => {\n            // Callback to cleanup three js, cancel animationFrame, etc\n        }\n    }, []);\n    \n    const makeLine = (color, pos, side) => {\n        const geometry = new THREE.BoxGeometry(...side);\n        const material = new THREE.MeshBasicMaterial({ color: color });\n        const line = new THREE.Mesh(geometry, material);\n        line.position.set(...pos)\n        scene.add(line)\n    }\n    const addObjects = (objects) => {\n        Object.keys(objects).forEach((key) => {\n            let player = objects[key]\n            scene.add(player)\n        })\n    }\n\n    const createPong = () => {\n        const newPlayers = {}\n        var geometry = new THREE.BoxGeometry(.2, 1, 0);\n        var sphere = new THREE.BoxGeometry(.2, .2, 0);\n        var material = new THREE.MeshBasicMaterial({ color: \"white\" });\n\n        let play1 = new THREE.Mesh(geometry, material);\n        let play2 = new THREE.Mesh(geometry, material);\n        let ball = new THREE.Mesh(sphere, material);\n        ball.position.set(0, 0, 0)\n        play1.position.set(-5, 0, 0);\n        play2.position.set(5, 0, 0);\n        \n        newPlayers[\"player1\"] = play1\n        newPlayers[\"player2\"] = play2\n        newPlayers[\"ball\"] = ball\n        \n        setPlayers(newPlayers)\n        \n        return newPlayers\n    }\n\n    const makeBall = (x, y, z) => {\n        var sphere = new THREE.BoxGeometry(.2, .2, 0);\n        var material = new THREE.MeshBasicMaterial({ color: \"white\" });\n        let ball = new THREE.Mesh(sphere, material);\n        ball.position.set(x, y, z)\n       return ball\n    }\n    const resetGame = () => {\n        socket.emit('reset-game', room)\n        onClose()\n        \n    }\n\n    const startGame = () => {\n        socket.emit(\"start\")\n    }\n    const logout = () => {\n        setName(''); setRoom('');\n        history.push('/')\n        history.go(0)\n    }\n\n    return (\n        <>\n        <Modal isOpen={isOpen} onClose={onClose}>\n                <ModalContent>\n                    <ModalHeader>\n                    </ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        <Flex justifyContent=\"center\">\n                     {\n                            games && games.map(game => {\n                                let score1 = game.score[0]\n                                let score2 = game.score[1]\n                                let winner = (score1 > score2) ? game.player1Name : game.player2Name\n                                return (\n                                    <div id=\"score\" key={game.room}>\n                                        <Text fontSize=\"2xl\">{winner.slice(0, 1).toUpperCase() + winner.slice(1)} WINS!</Text>\n                                    </div>\n                                )\n                            })\n                        }\n                        </Flex>\n                    </ModalBody>\n\n                    <ModalFooter justifyContent=\"space-around\">\n                        <Button variantColor=\"blue\" mr={3} onClick={resetGame}>\n                            Play Again\n                        </Button>\n                        <Button variantColor=\"blue\" mr={3} onClick={onClose}>\n                            Close\n                        </Button>\n                        \n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        <Flex align=\"center\" flexDirection=\"column\" justifyContent=\"center\" width=\"100%\" height=\"auto\">\n            <Flex flexDirection=\"row\" justifyContent=\"space-around\" width=\"100%\">\n            \n                <Text fontSize='4xl' color=\"blue.300\">{room.slice(0, 1).toUpperCase() + room.slice(1)}</Text>\n                <a className=\"log-out\" onClick={logout}>Logout</a>\n            </Flex>\n            \n            <Flex justifyContent=\"center\" width=\"800px\" height=\"60px\">\n                <Button id=\"start-game\" onClick={() => startGame()}> Start</Button>\n            </Flex>\n            <Flex justifyContent=\"space-between\" width=\"800px\" height=\"100%\">\n                <Text id=\"player1\" fontSize=\"2xl\" color=\"black\" fontWeight='600'>\n                    {\n                        games && games.map(game => {\n                            return (\n                                game.player1Name.slice(0, 1).toUpperCase() + game.player1Name.slice(1)\n                            )\n                        })\n                    }\n                </Text>\n                \n                <Text id=\"player2\" fontSize=\"2xl\" color=\"black\" fontWeight='600'>\n                    {\n                        games && games.map(game => {\n                            return (\n                                game.player2Name.slice(0, 1).toUpperCase() + game.player2Name.slice(1)\n                            )\n                        })\n                    }\n                </Text>\n            </Flex>\n            {\n                games && games.map(game => {\n                    let score1 = game.score[0]\n                    let score2 = game.score[1]\n                    return (\n                        <div id=\"score\" key={game.room}>\n                        <Text fontSize=\"2xl\">{score1} : {score2}</Text>\n                        </div>\n                    )\n                })\n            }\n            <div ref={ref} className=\"pongDiv\"/>\n            \n        </Flex>\n       \n    </>\n    )\n}\n\nexport default Scene\n","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Login/Login.js",["79","80","81"],"import React, { useContext, useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { MainContext } from '../../mainContext'\nimport { SocketContext } from '../../socketContext'\nimport { Flex, Heading, IconButton, Input } from \"@chakra-ui/react\"\nimport { RiArrowRightLine } from \"react-icons/ri\"\nimport { useToast } from \"@chakra-ui/react\"\nimport { UsersContext } from '../../usersContext'\n\nconst Login = () => {\n    const socket = useContext(SocketContext)\n    const { name, setName, room, setRoom } = useContext(MainContext)\n    const history = useHistory()\n    const toast = useToast()\n    const { users, setUsers, games, setGames } = useContext(UsersContext)\n\n    //Checks to see if there's a user already present\n\n    useEffect(() => {\n        socket.on(\"users\", users => {\n            setUsers(users)\n        })\n        socket.on(\"games\", games => {\n            setGames(games)\n        })\n    })\n\n    //Emits the login event and if successful redirects to chat and saves user data\n    const handleClick = () => {\n        socket.emit('login', { name, room }, error => {\n            if (error) {\n                console.log(error)\n                return toast({\n                    position: \"top\",\n                    title: \"Error\",\n                    description: error,\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                })\n            }\n       \n            history.push('/game')\n            return toast({\n                position: \"top\",\n                title: \"Hey there\",\n                description: `Welcome to ${room}`,\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n            })\n        })\n    }\n\n    return (\n        <Flex className='login' flexDirection='column' mb='8'>\n            <Heading as=\"h1\" size=\"4xl\" textAlign='center' mb='8' fontFamily='DM Sans' fontWeight='600' letterSpacing='-2px'>Pong.io</Heading>\n            <Flex className=\"form\" gap='1rem' flexDirection={{ base: \"column\", md: \"row\" }}>\n                <Input variant='filled' mr={{ base: \"0\", md: \"4\" }} mb={{ base: \"4\", md: \"0\" }} type=\"text\" placeholder='User Name' value={name} onChange={e => setName(e.target.value)} />\n                <Input variant='filled' mr={{ base: \"0\", md: \"4\" }} mb={{ base: \"4\", md: \"0\" }} type=\"text\" placeholder='Room Name' value={room} onChange={e => setRoom(e.target.value)} />\n                <IconButton colorScheme='blue' isRound='true' icon={<RiArrowRightLine />} onClick={handleClick}></IconButton>\n            </Flex>\n        </Flex>\n    )\n}\n\nexport default Login\n",["82","83"],"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/DefaultPage.js",["84"],"import { IconButton } from '@chakra-ui/react'\nimport React from 'react'\nimport { BiArrowBack } from 'react-icons/bi'\nimport { Redirect, useHistory } from 'react-router-dom'\nexport default function DefaultPage() {\n    const history = useHistory()\n    const redirect = () => history.push('/')\n    return (\n        <div>\n            <IconButton mr={2} isRound='true' bg='green.300' color='white' icon={<BiArrowBack />} onClick={redirect} /> You're lost. Go home.\n        </div>\n    )\n}\n","/Users/michaelwideburg/Desktop/multiGame/chat-client/src/socketContext.js",[],["85","86"],"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/usersContext.js",[],"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/components/Game/game.js",["87","88","89","90","91","92","93"],"/Users/michaelwideburg/Desktop/multiGame/chat-client/src/App.js",["94"],"import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Login from './components/Login/Login'\nimport Chat from './components/Chat/Chat'\nimport { SocketProvider } from './socketContext'\nimport { MainProvider } from './mainContext'\nimport './App.css'\nimport { ChakraProvider, Flex } from \"@chakra-ui/react\"\nimport { UsersProvider } from './usersContext'\nimport DefaultPage from './components/DefaultPage'\nimport Game from './components/Game/game'\nfunction App() {\n  return (\n    <ChakraProvider>\n      <MainProvider>\n        <UsersProvider>\n          <SocketProvider>\n            <Flex className=\"App\" align='center' flexDirection=\"column\" justifyContent='center'>\n              <Router>\n                <Switch>\n                  <Route exact path='/' component={Login} />\n                  <Route path='/game' component={Game} />\n                  <Route component={DefaultPage} />\n                </Switch>\n              </Router>\n              \n            </Flex>\n          </SocketProvider>\n        </UsersProvider>\n      </MainProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":16},{"ruleId":"99","severity":1,"message":"103","line":5,"column":5,"nodeType":"101","messageId":"102","endLine":5,"endColumn":12},{"ruleId":"99","severity":1,"message":"104","line":9,"column":5,"nodeType":"101","messageId":"102","endLine":9,"endColumn":17},{"ruleId":"99","severity":1,"message":"105","line":24,"column":10,"nodeType":"101","messageId":"102","endLine":24,"endColumn":16},{"ruleId":"99","severity":1,"message":"106","line":31,"column":13,"nodeType":"101","messageId":"102","endLine":31,"endColumn":18},{"ruleId":"99","severity":1,"message":"107","line":31,"column":27,"nodeType":"101","messageId":"102","endLine":31,"endColumn":35},{"ruleId":"99","severity":1,"message":"108","line":31,"column":37,"nodeType":"101","messageId":"102","endLine":31,"endColumn":45},{"ruleId":"99","severity":1,"message":"109","line":32,"column":49,"nodeType":"101","messageId":"102","endLine":32,"endColumn":56},{"ruleId":"99","severity":1,"message":"110","line":33,"column":19,"nodeType":"101","messageId":"102","endLine":33,"endColumn":27},{"ruleId":"99","severity":1,"message":"111","line":34,"column":12,"nodeType":"101","messageId":"102","endLine":34,"endColumn":19},{"ruleId":"99","severity":1,"message":"112","line":36,"column":11,"nodeType":"101","messageId":"102","endLine":36,"endColumn":22},{"ruleId":"99","severity":1,"message":"113","line":36,"column":24,"nodeType":"101","messageId":"102","endLine":36,"endColumn":32},{"ruleId":"99","severity":1,"message":"114","line":37,"column":11,"nodeType":"101","messageId":"102","endLine":37,"endColumn":22},{"ruleId":"99","severity":1,"message":"115","line":37,"column":24,"nodeType":"101","messageId":"102","endLine":37,"endColumn":32},{"ruleId":"99","severity":1,"message":"116","line":43,"column":12,"nodeType":"101","messageId":"102","endLine":43,"endColumn":23},{"ruleId":"99","severity":1,"message":"117","line":43,"column":25,"nodeType":"101","messageId":"102","endLine":43,"endColumn":39},{"ruleId":"99","severity":1,"message":"118","line":45,"column":11,"nodeType":"101","messageId":"102","endLine":45,"endColumn":23},{"ruleId":"99","severity":1,"message":"119","line":57,"column":13,"nodeType":"101","messageId":"102","endLine":57,"endColumn":21},{"ruleId":"99","severity":1,"message":"120","line":58,"column":13,"nodeType":"101","messageId":"102","endLine":58,"endColumn":22},{"ruleId":"99","severity":1,"message":"121","line":59,"column":13,"nodeType":"101","messageId":"102","endLine":59,"endColumn":20},{"ruleId":"99","severity":1,"message":"122","line":62,"column":15,"nodeType":"101","messageId":"102","endLine":62,"endColumn":23},{"ruleId":"123","severity":1,"message":"124","line":96,"column":24,"nodeType":"125","messageId":"126","endLine":96,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":99,"column":24,"nodeType":"125","messageId":"126","endLine":99,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":146,"column":26,"nodeType":"125","messageId":"126","endLine":146,"endColumn":28},{"ruleId":"127","severity":1,"message":"128","line":230,"column":17,"nodeType":"129","messageId":"130","endLine":231,"endColumn":27},{"ruleId":"99","severity":1,"message":"131","line":267,"column":23,"nodeType":"101","messageId":"102","endLine":267,"endColumn":31},{"ruleId":"132","severity":1,"message":"133","line":414,"column":8,"nodeType":"134","endLine":414,"endColumn":10,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":513,"column":17,"nodeType":"138","endLine":513,"endColumn":57},{"ruleId":"99","severity":1,"message":"139","line":1,"column":29,"nodeType":"101","messageId":"102","endLine":1,"endColumn":37},{"ruleId":"99","severity":1,"message":"106","line":15,"column":13,"nodeType":"101","messageId":"102","endLine":15,"endColumn":18},{"ruleId":"99","severity":1,"message":"140","line":15,"column":30,"nodeType":"101","messageId":"102","endLine":15,"endColumn":35},{"ruleId":"95","replacedBy":"141"},{"ruleId":"97","replacedBy":"142"},{"ruleId":"99","severity":1,"message":"143","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":18},{"ruleId":"95","replacedBy":"144"},{"ruleId":"97","replacedBy":"145"},{"ruleId":"99","severity":1,"message":"100","line":2,"column":8,"nodeType":"101","messageId":"102","endLine":2,"endColumn":16},{"ruleId":"99","severity":1,"message":"139","line":3,"column":40,"nodeType":"101","messageId":"102","endLine":3,"endColumn":48},{"ruleId":"99","severity":1,"message":"146","line":3,"column":50,"nodeType":"101","messageId":"102","endLine":3,"endColumn":56},{"ruleId":"99","severity":1,"message":"147","line":4,"column":16,"nodeType":"101","messageId":"102","endLine":4,"endColumn":22},{"ruleId":"99","severity":1,"message":"105","line":13,"column":10,"nodeType":"101","messageId":"102","endLine":13,"endColumn":16},{"ruleId":"99","severity":1,"message":"148","line":15,"column":19,"nodeType":"101","messageId":"102","endLine":15,"endColumn":23},{"ruleId":"99","severity":1,"message":"106","line":16,"column":13,"nodeType":"101","messageId":"102","endLine":16,"endColumn":18},{"ruleId":"99","severity":1,"message":"149","line":3,"column":8,"nodeType":"101","messageId":"102","endLine":3,"endColumn":12},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Heading' is defined but never used.","'ModalOverlay' is defined but never used.","'Socket' is defined but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'setGames' is assigned a value but never used.","'setGame' is assigned a value but never used.","'setScene' is assigned a value but never used.","'players' is assigned a value but never used.","'player1Name' is assigned a value but never used.","'setName1' is assigned a value but never used.","'player2Name' is assigned a value but never used.","'setName2' is assigned a value but never used.","'pressedKeys' is assigned a value but never used.","'setPressedKeys' is assigned a value but never used.","'ALLOWED_KEYS' is assigned a value but never used.","'moveLeft' is assigned a value but never used.","'moveRight' is assigned a value but never used.","'canJump' is assigned a value but never used.","'velocity' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'distance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addObjects', 'game.player1Name', 'game.player2Name', 'game.status', 'games', 'makeLine', 'name', 'onClose', 'onOpen', 'room', 'scene', and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["152"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'games' is assigned a value but never used.",["150"],["151"],"'Redirect' is defined but never used.",["150"],["151"],"'useRef' is defined but never used.","'Button' is defined but never used.","'room' is assigned a value but never used.","'Chat' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},"Update the dependencies array to be: [addObjects, game.player1Name, game.player2Name, game.status, games, makeLine, name, onClose, onOpen, room, scene, socket]",{"range":"155","text":"156"},[13565,13567],"[addObjects, game.player1Name, game.player2Name, game.status, games, makeLine, name, onClose, onOpen, room, scene, socket]"]